function mob_load_yaml(mob: entity):
  set {_id} to entity_nbt_get_tag({_mob}, "ID")
  set {_idPath} to {_id} in lower case
  replace "_" with "/" in {_idPath}
  load yaml "plugins/Skript/scripts/fort-lisa/config/mobs/%{_idPath}%.yml" as "YAML-MOB-%{_id}%"

function mob_store_unload_yaml(mob: entity):
  set {_id} to entity_nbt_get_tag({_mob}, "ID")
  unload yaml "YAML-MOB-%{_id}%"

function mob_set_stats(mob: entity, level: number):
  set {_id} to entity_nbt_get_tag({_mob}, "ID")
  loop node keys "STAT" of "YAML-MOB-%{_id}%":
    set {_key} to loop-value
    set {_value} to yaml value "STAT.%{_key}%" from "YAML-MOB-%{_id}%"
    if {_key} contains "_MULTIPLIER":
      set {_stat} to {_key}
      replace "_MULTIPLIER" with "" in {_stat}
      entity_nbt_add_stat({_mob}, {_stat}, {_value}*{_level})
    else:
      entity_nbt_add_stat({_mob}, {_key}, {_value})

  set {_health} to entity_nbt_get_stat({_mob}, "HEALTH")
  set maximum health of {_mob} to {_health}
  set health of {_mob} to {_health}

  set {_speed} to entity_nbt_get_stat({_mob}, "SPEED")
  apply potion of speed {_speed} without particles to {_mob} for 9999 seconds


function mob_set_equipments(mob: entity, level: number):
  set {_id} to entity_nbt_get_tag({_mob}, "ID")
  loop node keys "EQUIPMENT.%{_level}%" of "YAML-MOB-%{_id}%":
    set {_key} to loop-value
    set {_equipment} to yaml value "EQUIPMENT.%{_level}%.%{_key}%" from "YAML-MOB-%{_id}%" parsed as item
    equip {_mob} with {_equipment}

function mob_initialize(mob: entity, level: number):
  mob_set_stats({_mob}, {_level})
  mob_set_equipments({_mob}, {_level})
  mob_store_add({_mob})
  
function mob_summon(id: text, level: number, ai: text, location: location) :: entity:
  # NORMAL MOBS
  if {_id} is "ZOMBIE":
    summon adult zombie at {_location}
  else if {_id} is "SKELETON":
    summon skeleton at {_location}
  else if {_id} is "CREEPER":
    summon creeper at {_location}
  # MYTHIC MOBS
  else:
    set {_loc} to loc_to_mythicApi({_location})
    execute console command "mythicApi SUMMON %{_id}% %{_loc}% %{_level}% %{_ai}%"
  
  set {_mob} to last spawned entity
  if {_mob} is set:
    return mob_register({_mob}, {_id}, {_level}, {_ai})

function mob_register(mob: entity, id: text, level: number, ai: text) :: entity:
  entity_nbt_set_tag({_mob}, "TYPE", "MOB")
  entity_nbt_set_tag({_mob}, "CATEGORY", mob_getCategory({_id}))
  entity_nbt_set_tag({_mob}, "ID", {_id})
  entity_nbt_set_tag_native({_mob}, "{PersistenceRequired:1b}")
  
  set {_secureLoad} to false
  # Security if the file associated to the mob has not been loaded
  if yaml file "YAML-MOB-%{_id}%" does not exist:
    set {_secureLoad} to true
    mob_load_yaml({_mob})

  mob_initialize({_mob}, {_level})
  mob_ai_init({_mob}, {_ai})

  # Unload after security load
  if {_secureLoad} is true:
    mob_store_unload_yaml({_mob})

function mob_getCategory(id: text) :: text:
  loop {MOB::CATEGORY::*}:
    if {MOB::%loop-value%::*} contains {_id}:
      return loop-value