function mob_ai_targetLocation(mob: entity):
  mob_store_target_set({_mob}, "LOCATION")
  delete target of {_mob}
  set {_size} to entity_nbt_get_stat({_mob}, "SIZE")
  while mob_store_target_get({_mob}) is "LOCATION":
    set {_locationTarget} to mob_store_location_get({_mob})
    # broadcast "TARGET: %{_mob}% %{_locationTarget}%"
    set path targets of {_mob} to {_locationTarget}
    set {_dist} to distance between {_mob} and {_locationTarget}
    if {_dist} <= 3 + {_size}:
      # Location has been reached
      mob_store_location_delete({_mob}, {_locationTarget})
    if mob_store_location_count({_mob}) is 0:
      # No location to be reached
      mob_store_target_delete({_mob})
    wait 5 ticks

function mob_ai_targetPlayer(mob: entity, p: player):
  mob_store_target_set({_mob}, "PLAYER")
  mob_store_target_player_set({_mob}, {_p})
  player_store_target_add({_p}, {_mob})
  while mob_store_target_get({_mob}) is "PLAYER":
    if player_store_status_isset({_p}, "DEATH") is true:
      mob_store_target_player_delete({_mob})
      mob_store_target_delete({_mob})
    set target of {_mob} to {_p}
    wait 20 ticks

function mob_ai_target_findSomethingToDo(mob: entity):
  mob_store_location_set({_mob}, {LOCATION::CASTLE::THRONE})

  # broadcast "TODO: make mob find something to do"