# TARGET_PLAYER_RADIUS_SOFT LISTENER
function mob_ai_listener_TARGET_PLAYER_RADIUS_SOFT(mob: entity):
  set {_radius} to mob_store_listener_get_value({_mob}, "TARGET_PLAYER_RADIUS_SOFT", "RADIUS")
  while mob_store_listener_isEnabled({_mob}, "TARGET_PLAYER_RADIUS_SOFT") is true:
    set {_player} to random element of players in radius {_radius} around {_mob}
    if {_player} is set:
      if player_store_status_isset({_p}, "DEATH") is false:
        set {_count} to player_store_target_count({_player})
        if {_count} <= 8: #maximum number of mobs able to target the same player with radius listener
          mob_ai_targetPlayer({_mob}, {_player})
          mob_store_listener_set({_mob}, "TARGET_ABANDON_TOO_FAR", "radius", {_radius})
          mob_store_listener_delete({_mob}, "TARGET_PLAYER_RADIUS_SOFT")
    wait 20 ticks

# TARGET_ABANDON_TOO_FAR LISTENER
function mob_ai_listener_TARGET_ABANDON_TOO_FAR(mob: entity):
  set {_radius} to mob_store_listener_get_value({_mob}, "TARGET_ABANDON_TOO_FAR", "RADIUS")
  # broadcast "ยง2PASSING %uuid of {_mob}%"
  while mob_store_listener_isEnabled({_mob}, "TARGET_ABANDON_TOO_FAR") is true:
    # broadcast "%uuid of {_mob}% LISTENER TARGET_ABANDON_TOO_FAR %mob_store_target_player_isset({_mob})% %mob_store_target_player_get({_mob})%"
    if mob_store_target_player_isset({_mob}) is true:
      set {_playertarget} to mob_store_target_player_get({_mob})
      # broadcast "LISTENER TARGET_ABANDON_TOO_FAR"
      set {_dist} to distance between {_mob} and {_playertarget}
      if {_dist} >= {_radius}:
        add 1 to {_timeTooFar}
        # broadcast "I AM FAR - %{_timeTooFar}%"
      else:
        set {_timeTooFar} to 0

      if {_timeTooFar} >= 4:
        # broadcast "I STOP TARGET_ABANDON_TOO_FAR LISTENER"
        mob_store_listener_delete({_mob}, "TARGET_ABANDON_TOO_FAR")
        mob_store_listener_set({_mob}, "TARGET_PLAYER_RADIUS_SOFT")
        mob_store_target_player_delete({_mob})
        mob_store_target_delete({_mob})
    wait 2 second

# Called through onDamage event
function mob_ai_listener_RECEIVE_PLAYER_DAMAGE(mob: entity, attacker: player):
  if mob_store_target_get({_mob}) is not "PLAYER":
    mob_ai_targetPlayer({_mob}, {_attacker})
    mob_store_listener_set({_mob}, "TARGET_ABANDON_TOO_FAR")
    mob_store_listener_delete({_mob}, "TARGET_PLAYER_RADIUS_SOFT")

# IS_ACTIVE IN_WATER
function mob_ai_listener_IN_WATER(mob: entity):
  set {_inWater} to 0
  while mob_store_listener_isEnabled({_mob}, "IN_WATER") is true:
    # broadcast "IN WATER LISTENER"
    if {_mob} is in water:
      # broadcast "MOB IS IN WATERRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"
      apply potion of speed 10 without particles to {_mob} for 30 ticks
      # if mob_store_target_get({_mob}) is not "PLAYER":
      #   add 1 to {_inWater}
      #   if {_inWater} >= 5:
      #     # broadcast "LISTENER IN_WATER : Teleport to nearest entrance"
      #     set {_nearestEntrance} to location_castle_nearest_entrance({_mob})
      #     teleport {_mob} to {_nearestEntrance}
      #     mob_store_location_delete_all({_mob})
      #     mob_store_location_set({_mob}, {LOCATION::CASTLE::THRONE})
    else:
      set {_inWater} to 0
    wait 30 ticks

