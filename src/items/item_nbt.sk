function item_nbt_get_tag(it: item, key: text) :: text:
  set {_nbt} to full nbt compound of {_it}
  set {_res} to string tag "tag;%{_key}%" of {_nbt}
  if {_res} is not "":
    return {_res}

function item_nbt_get_list(it: item, key: text) :: texts:
  set {_nbt} to full nbt compound of {_it}
  set {_res::*} to string list tag "tag;%{_key}%" of {_nbt}
  if size of {_res::*} > 0:
    return {_res::*}

function item_nbt_set_tag(it: item, key: text, value: text) :: item:
  set {_nbt} to full nbt compound of {_it}
  set string tag "tag;%{_key}%" of {_nbt} to {_value}
  return item from nbt {_nbt}

function item_nbt_set_list(it: item, key: text, value: texts) :: item:
  set {_nbt} to full nbt compound of {_it}
  set string list tag "tag;%{_key}%" of {_nbt} to {_value::*}
  return item from nbt {_nbt}

function item_nbt_isset_tag(it: item, key: text) :: boolean:
  set {_nbt} to full nbt compound of {_it}
  set {_res} to string tag "tag;%{_key}%" of {_nbt}
  if {_res} is not "":
    return true
  return false

function item_nbt_isset_list(it: item, key: text) :: boolean:
  set {_nbt} to full nbt compound of {_it}
  set {_res::*} to string list tag "tag;%{_key}%" of {_nbt}
  if size of {_res::*} > 0:
    return true
  return false

function item_nbt_add_list(it: item, key: text, value: texts) :: item:
  set {_nbt} to full nbt compound of {_it}
  if item_nbt_isset_list({_it}, {_key}) is true:
    set {_currList::*} to item_nbt_get_list({_it}, {_key})
    set {_it} to item_nbt_set_list({_it}, {_key}, ({_currList::*} and {_value::*}))
  else:
    set {_it} to item_nbt_set_list({_it}, {_key}, {_value::*})
  return {_it}

function item_nbt_set_stat(it: item, key: text, value: number) :: item:
  if {_value} is set:
    set {_nbt} to full nbt compound of {_it}
    set float tag "tag;%{_key}%" of {_nbt} to {_value}
    if item_nbt_get_list({_it}, "STAT") does not contain {_key}:
      set {_it} to item from nbt {_nbt}
      return item_nbt_add_list({_it}, "STAT", {_key})
    return item from nbt {_nbt}
  return {_it}

function item_nbt_get_stat(it: item, key: text) :: number:
  set {_nbt} to full nbt compound of {_it}
  set {_res} to float tag "tag;%{_key}%" of {_nbt}
  return {_res}

function item_nbt_isset_stat(it: item, key: text) :: boolean:
  set {_nbt} to full nbt compound of {_it}
  set {_res} to tag "tag;%{_key}%" of {_nbt}
  if {_res} is set:
    return true
  return false

function item_nbt_add_stat(it: item, key: text, amount: number) :: item:
  if item_nbt_isset_stat({_it}, {_key}) is true:
    set {_currentAmount} to item_nbt_get_stat({_it}, {_key})
    set {_finalAmount} to {_currentAmount} + {_amount}
    set {_item} to item_nbt_set_stat({_it}, {_key}, {_finalAmount})
  else:
    set {_item} to item_nbt_set_stat({_it}, {_key}, {_amount})
  return {_item}

function item_nbt_set_tag_native(it: item, value: text) :: item:
  add nbt compound of {_value} to nbt compound of {_it}
  return {_it}

function item_nbt_delete(it: item, key: text) :: item:
  set {_nbt} to full nbt compound of {_it}
  delete tag "tag;%{_key}%" of {_nbt}
  return item from nbt {_nbt}

function item_nbt_copyToEntity(it: item, entity: entity):
  set {_type} to item_nbt_get_tag({_it}, "TYPE")
  set {_category} to item_nbt_get_tag({_it}, "CATEGORY")
  set {_id} to item_nbt_get_tag({_it}, "ID")
  set {_will::*} to item_nbt_get_list({_it}, "WILL")
  set {_intellect::*} to item_nbt_get_list({_it}, "INTELLECT")
  set {_memory::*} to item_nbt_get_list({_it}, "MEMORY")

  entity_nbt_set_tag({_entity}, "TYPE", {_type})
  entity_nbt_set_tag({_entity}, "CATEGORY", {_category})
  entity_nbt_set_tag({_entity}, "ID", {_id})
  entity_nbt_set_list({_entity}, "WILL", {_will::*})
  entity_nbt_set_list({_entity}, "INTELLECT", {_intellect::*})
  entity_nbt_set_list({_entity}, "MEMORY", {_memory::*})

  loop item_nbt_get_list({_it}, "STAT"):
    set {_stat} to loop-value
    if item_nbt_isset_stat({_it}, {_stat}) is true:
      set {_itemValue} to item_nbt_get_stat({_it}, {_stat})
      entity_nbt_set_stat({_entity}, {_stat}, {_itemValue})