#Affect stats to item
function item_stat_initialize(p: player, type: text, item: item, idWill: text = "") :: item:
  set {_category} to item_nbt_get_tag({_item}, "CATEGORY")
  if {_idWill} is not "":
    # We have to get the stats of the consacred item
    set {_referenceStats::*} to {SKILL::%{_category}%::%{_idWill}%::STAT::*}
    set {_referencePath} to "SKILL::%{_category}%::%{_idWill}%"
  else:
    set {_id} to item_nbt_get_tag({_item}, "ID")
    set {_referenceStats::*} to {%{_type}%::%{_category}%::%{_id}%::STAT::*}
    set {_referencePath} to "%{_type}%::%{_category}%::%{_id}%"

  loop {_referenceStats::*}:
    set {_stat} to loop-value
    set {_value} to {%{_referencePath}%::%{_stat}%}
    set {_item} to item_nbt_set_stat({_item}, {_stat}, {_value}, true)
  return {_item}

function item_attribute_initialize(p: player, item: item) :: item:
  set {_type} to item_nbt_get_tag({_item}, "TYPE")
  set {_category} to item_nbt_get_tag({_item}, "CATEGORY")
  set {_id} to item_nbt_get_tag({_item}, "ID")
  set {_item} to item_nbt_set_list({_item}, "ATTRIBUTE", {%{_type}%::%{_category}%::%{_id}%::ATTRIBUTE::*})
  return {_item}

function item_gift_initialize(p: player, item: item) :: item:
  set {_type} to item_nbt_get_tag({_item}, "TYPE")
  set {_category} to item_nbt_get_tag({_item}, "CATEGORY")
  set {_id} to item_nbt_get_tag({_item}, "ID")
  loop {GIFT::CATEGORY::*}:
    set {_item} to item_nbt_set_stat({_item}, "%loop-value%_MAX", {%{_type}%::%{_category}%::%{_id}%::%loop-value%_MAX})
  return {_item}

function item_create(p: player, type: text, category: text, id: text, idWill: text = "") :: item:
  set {_uuid} to item_generate_uuid({_type}, {_category}, {_id})
  if {_idWill} is not "":
    set {_item} to customitem {SKILL::%{_category}%::%{_idWill}%::CUSTOM_ITEM}
    if {_item} is not set:
      set {_modelData} to {SKILL::%{_category}%::%{_idWill}%::CUSTOM_MODEL_DATA}
      set {_item} to {SKILL::%{_category}%::%{_idWill}%::ITEM}
      if {_modelData} is set:
        set {_item} to item_nbt_set_tag_native({_item}, "{CustomModelData: %{_modelData}%}")
  else:
    set {_item} to customitem {%{_type}%::%{_category}%::%{_id}%::CUSTOM_ITEM}
    if {_item} is not set:
      set {_item} to {%{_type}%::%{_category}%::%{_id}%::ITEM}

  set {_item} to item_nbt_set_tag({_item}, "TYPE", {_type})
  set {_item} to item_nbt_set_tag({_item}, "CATEGORY", {_category})
  set {_item} to item_nbt_set_tag({_item}, "ID", {_id})
  set {_item} to item_nbt_set_tag({_item}, "UUID", {_uuid})
  set {_item} to item_nbt_set_stat({_item}, "TIER", {%{_type}%::%{_category}%::%{_id}%::TIER})
  set {_item} to item_stat_initialize({_p}, {_type}, {_item}, {_idWill})
  set {_item} to item_attribute_initialize({_p}, {_item})
  set {_item} to item_gift_initialize({_p}, {_item})
  set {_item} to i18n_item({_p}, {_item})
  return {_item}

function item_generate_uuid(type: text, category: text, id: text) :: text:
  return random uuid
  # add 1 to {IDS::%{_type}%::%{_category}%::%{_id}%}
  # return "%{_type}%/%{_category}%/%{IDS::%{_type}%::%{_category}%::%{_id}%}%"

function item_give(p: player, type: text, category: text, id: text):
  if {_type} is "WEAPON":
    weapon_give({_p}, {_category}, {_id})
  else if {_type} is "EQUIPMENT":
    equipment_give({_p}, {_category}, {_id})
  else if {_type} is "SKILL":
    skill_give({_p}, {_category}, {_id})
  else if {_type} is "GIFT":
    gift_give({_p}, {_category}, {_id})
  else:
    error("ITEM GIVE ERROR : %{_type}% NOT FOUND")

function item_merge_stats(source: item, destination: item) :: item:
  loop item_nbt_get_list({_source}, "STAT"):
    set {_stat} to loop-value
    set {_value} to item_nbt_get_stat({_source}, {_stat})
    set {_destination} to item_nbt_add_stat({_destination}, {_stat}, {_value})
  return {_destination}

function item_merge_attributes(source: item, destination: item) :: item:
  set {_attrs::*} to item_nbt_get_list({_source}, "ATTRIBUTE")
  set {_destAttrs::*} to item_nbt_get_list({_destination}, "ATTRIBUTE")
  loop {_attrs::*}:
    if {_destAttrs::*} does not contain loop-value:
      set {_destination} to item_nbt_add_list({_destination}, "ATTRIBUTE", loop-value)
  return {_destination}
