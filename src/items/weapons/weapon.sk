function weapon_category_get(category: text) :: text:
    if {WEAPON::%{_category}%} is set:
        return {_category}
    else:
        error("WEAPON of category %{_category}% does not exist")

#Give a weapon to the player
function weapon_give(p: player, category: text, id: text) :: item:
    set {_weapon} to item_create({_p}, "WEAPON", {_category}, {_id})  
    set {_weapon} to item_nbt_set_tag_native({_weapon}, "{Unbreakable:1,HideFlags:4}")  
    player_store_weapon_give({_p}, {_weapon})
    return {_weapon}

function weapon_stat_reload(p: player, weapon: item) :: item:
    set {_idWill} to first element of item_nbt_get_list({_weapon}, "WILL")
    if {_idWill} is set:
        return weapon_will_stat({_p}, {_weapon}, {_idWill})
    else:
        return item_stat_initialize({_p}, "WEAPON", {_weapon})

function weapon_will_stat(p: player, weapon: item, idWill: text) :: item:
    set {_category} to item_nbt_get_tag({_weapon}, "CATEGORY")
    loop {STAT::ALL::*}:
        set {_stat} to loop-value
        set {_value} to {SKILL::%{_category}%::%{_idWill}%::%loop-value%}
        set {_weapon} to item_nbt_delete({_weapon}, {_stat})
        if {_value} is set:
            set {_weapon} to item_nbt_set_stat({_weapon}, loop-value, {_value})
    return {_weapon}

function weapon_onEquip(p: player, weapon: item):
    player_store_weapon_equip({_p}, {_weapon})

# #Called when left clicking with a weapon. 
function weapon_leftClick(p: player, weapon: item):
    weapon_cast({_p}, {_weapon})

# #Called when right clicking with a weapon. 
function weapon_rightClick(p: player, weapon: item):
    set {_category} to item_nbt_get_tag({_weapon}, "CATEGORY")
    if "BOW" and "CROSSBOW" contains {_category}:
        player_store_weapon_give_arrow({_p})

function weapon_cast(p: player, weapon: item):
    set {_category} to item_nbt_get_tag({_weapon}, "CATEGORY")
    if item_store_stat_isset({_weapon}, "CD_NORMAL") is true:
        set {_cd} to item_store_stat_get({_weapon}, "CD_NORMAL")
        if {_cd} is 0:
            if {_category} is "STAFF":
                if item_nbt_isset_list({_weapon}, "WILL") is true:
                    staff_cast_skill({_p}, {_weapon})
                else:
                    staff_cast({_p}, {_weapon})
            weapon_cooldown({_p}, {_weapon})
    else:
        if item_nbt_isset_list({_weapon}, "WILL") is true:
            if {_category} is "STAFF":
                staff_cast_skill({_p}, {_weapon})
        else:
            staff_cast({_p}, {_weapon})
        weapon_cooldown({_p}, {_weapon})
        

function weapon_cooldown(p: player, weapon: item):
    set {_cooldown} to item_nbt_get_stat({_weapon}, "COOLDOWN")
    item_store_stat_set({_weapon}, "CD_NORMAL", {_cooldown})
    set {_cdNormal} to item_store_stat_get({_weapon}, "CD_NORMAL")
    while {_cdNormal} > 0:
        set {_cdNormal} to {_cdNormal} - 5
        item_store_stat_set({_weapon}, "CD_NORMAL", {_cdNormal})
        wait 5 tick

#Called when the player hit a block/entity with his weapon
function weapon_hit(p: player, projectile: entity):
    set {_category} to entity_nbt_get_tag({_projectile}, "CATEGORY")
    set {_will::*} to entity_nbt_get_list({_projectile}, "WILL")
    if size of {_will::*} > 0:
        if {_category} is "STAFF":
            staff_hit_skill({_p}, {_projectile})
    else:
        if {_category} is "STAFF":
            staff_hit({_p}, {_projectile})

function weapon_hit_projectile(p: player, projectile: entity, victim: entity):
    set {_category} to entity_nbt_get_tag({_projectile}, "CATEGORY")
    set {_will::*} to entity_nbt_get_list({_projectile}, "WILL")
    if size of {_will::*} > 0:
        if {_category} is "CROSSBOW":
            crossbow_hit_skill({_p}, {_projectile}, {_victim})
    else:
        if {_category} is "CROSSBOW":
            crossbow_hit({_p}, {_projectile}, {_victim})