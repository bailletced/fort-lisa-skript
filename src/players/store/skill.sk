function player_store_skill_give(p: player, skill: item):
  set {_count} to size of {players::%{_p}%::skill::*}
  if slot {_count} of {_p} is not air:
    set {_tmp} to slot {_count} of {_p}
    set slot {_count} of {_p} to {_skill}
    give {_tmp} to {_p}
  else:
    set slot {_count} of {_p} to {_skill}
  add {_skill} to {players::%{_p}%::skill::*}

function player_store_skill_count(p: player) :: number:
  return size of {players::%{_p}%::skill::*}

function player_store_skill_reload_all(p: player):
  loop {HOTBAR_SLOTS::*}:
    set {_slot} to loop-value
    set {_item} to slot {_slot} of {_p}
    if {players::%{_p}%::skill::*} contains {_item}:
      set {_originSkill} to slot {_slot} of {_p}
      set {_skill} to item_stat_initialize({_p}, "SKILL", {_originSkill})
      set {_skill} to i18n_item({_p}, {_skill})
      set slot {_slot} of {_p} to {_skill}
      remove {_originSkill} from {players::%{_p}%::skill::*}
      add {_skill} to {players::%{_p}%::skill::*}

function player_store_skill_slot(p: player, skill: item) :: number:
  loop {HOTBAR_SLOTS::*}:
    set {_slot} to loop-value
    set {_item} to slot {_slot} of {_p}
    if {_item} is {_skill}:
      return {_slot}
  return {NaN}

function player_store_skill_delete(p: player, skill: item):
  if {players::%{_p}%::skill::*} contains {_skill}:
    remove {_skill} from {players::%{_p}%::skill::*}
    set {_slot} to player_store_skill_slot({_p}, {_skill})
    set slot {_slot} of {_p} to air

function player_store_skill_delete_all(p: player):
  loop {players::%{_p}%::skill::*}:
    player_store_skill_delete({_p}, loop-value)


