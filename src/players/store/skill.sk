function player_store_skill_uuids(p: player) :: texts:
  return {players::%{_p}%::skill::*}

function player_store_skills(p: player) :: items:
  delete {_res::*}
  set {_uuid::*} to player_store_skill_uuids({_p})
  loop {_uuid::*}:
    set {_slot} to player_store_skill_slot_uuid({_p}, loop-value)
    add slot {_slot} of {_p} to {_res::*}
  return {_res::*} 

function player_store_skill_give(p: player, skill: item):
  # set {_count} to size of {players::%{_p}%::skill::*}
  # if slot {_count} of {_p} is not air:
  #   set {_tmp} to slot {_count} of {_p}
  #   set slot {_count} of {_p} to {_skill}
  #   give {_tmp} to {_p}
  # else:
  #   set slot {_count} of {_p} to {_skill}
  give 1 of {_skill} to {_p}
  set {_uuid} to item_nbt_get_tag({_skill}, "UUID")
  add {_uuid} to {players::%{_p}%::skill::*}

function player_store_skill_count(p: player) :: number:
  return size of {players::%{_p}%::skill::*}

function player_store_skill_reload_all(p: player):
  loop {HOTBAR_SLOTS::*}:
    set {_slot} to loop-value
    set {_item} to slot {_slot} of {_p}
    set {_uuid} to item_nbt_get_tag({_item}, "UUID")
    if {players::%{_p}%::skill::*} contains {_uuid}:
      set {_originSkill} to slot {_slot} of {_p}
      set {_skill} to item_stat_initialize({_p}, "SKILL", {_originSkill})
      set {_skill} to i18n_item({_p}, {_skill})
      set slot {_slot} of {_p} to {_skill}

function player_store_skill_slot(p: player, skill: item) :: number:
  set {_uuid} to item_nbt_get_tag({_skill}, "UUID")
  return player_store_skill_slot_uuid({_p}, {_uuid})

function player_store_skill_slot_uuid(p: player, uuid: text) :: number:
  loop {HOTBAR_SLOTS::*}:
    set {_slot} to loop-value
    set {_item} to slot {_slot} of {_p}
    if item_nbt_get_tag({_item}, "UUID") is {_uuid}:
      return {_slot}
  return {NaN}
  
function player_store_skill_delete(p: player, skill: item):
  set {_uuid} to item_nbt_get_tag({_skill}, "UUID")
  player_store_skill_delete_uuid({_p}, {_uuid})

function player_store_skill_delete_uuid(p: player, uuid: text):
  if {players::%{_p}%::skill::*} contains {_uuid}:
    set {_slot} to player_store_skill_slot_uuid({_p}, {_uuid})
    remove {_uuid} from {players::%{_p}%::skill::*}
    set slot {_slot} of {_p} to air

function player_store_skill_delete_all(p: player):
  loop {players::%{_p}%::skill::*}:
    player_store_skill_delete_uuid({_p}, loop-value)
  delete {players::%{_p}%::skill::*}