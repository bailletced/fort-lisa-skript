function player_store_stat_sideEffect(p: player, key: text, value: number):
    if {_key} is "HEALTH_MAX":
        set max health of {_p} to {_value}
    else if {_key} is "HEALTH":
        set health of {_p} to {_value}
    else if  {_key} is "SPEED":
        if {_value} is 0:
            remove speed from {_p}
        else:
            apply potion of speed of tier {_value} without particles to {_p} for 1 day

function player_store_stat_set(p: player, key: text, value: number):
    set {players::%{_p}%::stat::%{_key}%} to {_value}
    player_store_stat_sideEffect({_p}, {_key}, {_value})
    if {_key} is not "MANA":
        player_store_stat_render({_p})

#Add a stat to a a player 
#Params: 
#   p : player The player to give the skill
#   key : text The stat to set
#   value : object The value to set 
function player_store_stat_add(p: player, key: text, value: number):
    if player_store_stat_isset({_p}, {_key}) is true:
        add {_value} to {players::%{_p}%::stat::%{_key}%}
    else:
        set {players::%{_p}%::stat::%{_key}%} to {_value}
    player_store_stat_sideEffect({_p}, {_key}, {players::%{_p}%::stat::%{_key}%})

function player_store_stat_add_lazy(p: player, key: text, value: number):
    if player_store_stat_isset({_p}, {_key}) is true:
        add {_value} to {players::%{_p}%::stat::%{_key}%}
    else:
        set {players::%{_p}%::stat::%{_key}%} to {_value}
    player_store_stat_sideEffect({_p}, {_key}, {players::%{_p}%::stat::%{_key}%})

function player_store_stat_render(p: player):
    player_store_weapon_reload_all({_p})
    player_store_skill_reload_all({_p})
    player_interface_tablist_player({_p})

#Set stat to a a player 
#Params: 
#   p : player The player to give the skill
#   key : text The stat to set
#Return:
#   object
function player_store_stat_get(p: player, key: text) :: number:
    if {_key} is "HEALTH_MAX":
        return max health of {_p}
    if {_key} is "HEALTH":
        return health of {_p}
    return {players::%{_p}%::stat::%{_key}%}

#Determine if a stat is set
#Params: 
#   p : player The player to give the skill
#   key : text The stat
#Return:
#   boolean
function player_store_stat_isset(p : player, key: text) :: boolean:
    if {players::%{_p}%::stat::%{_key}%} is set:
        return true
    else:
        return false

function player_store_stat_reset_all(p: player):
    player_store_stat_set({_p}, "ATTACK", 0)
    player_store_stat_set({_p}, "HEALTH_MAX", 20)
    player_store_stat_set({_p}, "HEALTH", 20)
    player_store_stat_set({_p}, "DEFENCE", 0)
    player_store_stat_set({_p}, "CHARITY", 0)

#Delete a stat for a player
#Params: 
#   p : player The player to give the skill
#   key : text The stat to delete
function player_store_stat_delete(p: player, key: text):
    delete {players::%{_p}%::stat::%{_key}%}


#Delete all stats of a player
#Params: 
#   p : player The player to give the skill
function player_store_stat_delete_all(p: player):
    delete {players::%{_p}%::stat::*}