function player_store_weapon_equip(p: player, weapon: item):
  set {_oldWeapon} to {players::%{_p}%::weapon::equipped}
  set {players::%{_p}%::weapon::equipped} to {_weapon}

function player_store_weapon_give(p: player, weapon: item):
  add {_weapon} to {players::%{_p}%::weapon::*}
  give 1 of {_weapon} to {_p}

function player_store_weapon_reload_all(p: player):
  loop {HOTBAR_SLOTS::*}:
    set {_slot} to loop-value
    set {_item} to slot {_slot} of {_p}
    if {players::%{_p}%::weapon::*} contains {_item}:
      set {_originWeapon} to slot {_slot} of {_p}
      set {_weapon} to item_stat_initialize({_p}, "WEAPON", {_originWeapon})
      set {_weapon} to i18n_item({_p}, {_weapon})
      set slot {_slot} of {_p} to {_weapon}
      remove {_originWeapon} from {players::%{_p}%::weapon::*}
      add {_weapon} to {players::%{_p}%::weapon::*}

# Called to give an arrow to the player when using bows
function player_store_weapon_give_arrow(p: player):
  if player_store_weapon_isset_arrow({_p}) is false:
    set {_slot} to 35
    set {players::%{_p}%::weaponArrow} to slot {_slot} of {_p}
    set slot {_slot} of {_p} to arrow

function player_store_weapon_isset_arrow(p: player) :: boolean:
  if {players::%{_p}%::weaponArrow} is set:
    return true
  return false

# Called to give an arrow to the player when using bows
function player_store_weapon_remove_arrow(p: player):
  set {_slot} to 35
  set slot {_slot} of {_p} to {players::%{_p}%::weaponArrow}
  delete {players::%{_p}%::weaponArrow}

function player_store_weapon_count(p: player) :: number:
  return size of {players::%{_p}%::weapon::*}

function player_store_weapon_delete_all(p: player):
  delete {players::%{_p}%::weapon::*}
