#Return item attribute
function i18n_item_attr(p: player, item: item, attr: text) :: text:
    set {_type} to item_nbt_get_tag({_item}, "TYPE")
    set {_category} to item_nbt_get_tag({_item}, "CATEGORY")
    set {_id} to item_nbt_get_tag({_item}, "ID")
    set {_will::*} to item_nbt_get_list({_item}, "WILL")
    set {_varTrads::*} to item_nbt_get_list({_item}, "VAR_TRAD")
    if size of {_will::*} > 0:
        if {_type} is "WEAPON":
            if {_attr} is "LORE":
                set {_skillId} to first element of {_will::*}
                return i18n({_p}, "SKILL.%{_category}%.%{_skillId}%.%{_attr}%", "", {_varTrads::*})
    return i18n({_p}, "%{_type}%.%{_category}%.%{_id}%.%{_attr}%", "", {_varTrads::*})

function i18n_item_title(p: player, it: item) :: text:
    set {_title} to i18n_item_attr({_p}, {_it}, "TITLE")
    set {_tier} to item_nbt_get_stat({_it}, "TIER")
    replace "{_TIER}" in {_title} with parser_tier({_tier})
    return {_title}

function i18n_item_gift_lore(p: player, it: item) :: texts:
    delete {_res::*}
    set {_type} to item_nbt_get_tag({_it}, "TYPE")
    set {_category} to item_nbt_get_tag({_it}, "CATEGORY")
    set {_id} to item_nbt_get_tag({_it}, "ID")
    loop {GIFT::CATEGORY::*}:
        set {_i18nGift} to i18n({_p}, "GIFT.%loop-value%.TITLE")
        set {_giftMaxValue} to item_nbt_get_stat({_it}, "%loop-value%_MAX")
        set {_giftCountValue} to size of item_nbt_get_list({_it}, loop-value)
        if {_giftMaxValue} is not 0:
            if {_giftMaxValue} is set:
                add " %{_i18nGift}%: %{_giftCountValue}%/%{_giftMaxValue}%" to {_res::*}
    if size of {_res::*} > 0:
        return {_res::*}

function i18n_item_attribute_lore(p: player, it: item) :: text:
    set {_res} to ""
    set {_attributes::*} to item_nbt_get_list({_it}, "ATTRIBUTE")
    if {_attributes::*} is set:
        loop {_attributes::*}:
            set {_i18nAttr} to i18n({_p}, "ATTRIBUTE.%loop-value%", "§e")
            set {_res} to "%{_res}%%{_i18nAttr}% "
        return {_res}

function i18n_item_skill_lore(p: player, it: item) :: texts:
    set {_type} to item_nbt_get_tag({_it}, "TYPE") 
    set {_will::*} to item_nbt_get_list({_it}, "WILL")
    if size of {_will::*} > 0:
        set {_will} to first element of {_will::*}
        return "" and i18n({_p}, "GIFT.WILL.%{_will}%.TITLE", "§3")

function i18n_item_intellect_lore(p: player, it: item) :: texts:
    set {_intellect::*} to item_nbt_get_list({_it}, "INTELLECT")
    if size of {_intellect::*} > 0:
        delete {_res::*}
        loop {_intellect::*}:
            set {_id} to loop-value
            set {_titleIntellect} to i18n({_p}, "GIFT.INTELLECT.%{_id}%.TITLE", "§6")
            add {_titleIntellect} to {_res::*}
        return {_res::*}

function i18n_item_stat_lore(p: player, it: item) :: texts:
    set {_type} to item_nbt_get_tag({_it}, "TYPE")
    if {_type} is "EQUIPMENT":
        set {_res::*} to ""
        loop item_nbt_get_list({_it}, "STAT"):
            set {_stat} to loop-value
            if item_nbt_isset_stat({_it}, {_stat}) is true:
                set {_value} to color_stat({_stat}, item_nbt_get_stat({_it}, {_stat}))
                set {_i18nStat} to i18n({_p}, "STAT.%{_stat}%.NORMAL", "§f")
                add "%{_i18nStat}% : %{_value}%" to {_res::*}
        return {_res::*}

function i18n_item_lore(p: player, it: item) :: text:
    set {_type} to item_nbt_get_tag({_it}, "TYPE")
    set {_category} to item_nbt_get_tag({_it}, "CATEGORY")
    set {_id} to item_nbt_get_tag({_it}, "ID")
    set {_lore} to i18n_item_attr({_p}, {_it}, "LORE")
    loop item_nbt_get_list({_it}, "STAT"):
        set {_multiplier} to 0
        set {_playerStat} to 0
        set {_key} to loop-value
        set {_pureStat} to loop-value
        set {_value} to item_nbt_get_stat({_it}, {_key})
        if size of {_key} split at "-" > 1:
            set {_spitted::*} to {_key} split at "-"
            set {_pureStat} to {_spitted::1}
        else:
            set {_pureStat} to {_key}
        if item_nbt_isset_stat({_it}, "%{_pureStat}%_MULTIPLIER") is true:
            if {_key} contains "EFFECT":
                replace "EFFECT_" with "" in {_pureStat}
            if player_store_stat_isset({_p}, {_pureStat}) is true:
                set {_multiplier} to item_nbt_get_stat({_it}, "%{_key}%_MULTIPLIER")
                set {_playerStat} to player_store_stat_get({_p}, {_pureStat})
        if size of {_pureStat} split at "-" > 1:
            set {_spitted::*} to {_key} split at "-"
            set {_pureStat} to {_spitted::1}
            
        set {_color} to {STAT::%{_pureStat}%::COLOR}
        set {_icon} to {STAT::%{_pureStat}%::ICON}
        set {_endIcon} to {STAT::%{_pureStat}%::ICON_END}
        if {_endIcon} is not set:
            set {_endIcon} to ""
        set {_valueFinal} to {_value} + {_playerStat} * {_multiplier}
        set {_typeKey::*} to {_pureStat} split at "_"
        set {_typeKey} to the last element of {_typeKey::*}
        set {_splitted::*} to {_typeKey} split at "-"
        set {_typeKey} to {_splitted::1}
        if "DURATION", "FREQUENCY" and "COOLDOWN" contains {_typeKey}:
            set {_valueFinal} to "%{_value}/20%sec"
        replace "{_%{_key}%}" in {_lore} with "%{_color}%%{_icon}%%{_valueFinal}%%{_endIcon}%§f"
    return {_lore}

#transform a lore to list to make sure it will be visible once set to an item
function i18n_transform_description(lore: text) :: texts:   
    if {_lore} is "":
        stop
    set {_lores::*} to {_lore} split at " "
    set {_text} to "§f"
    set {_idx} to 1
    delete {_res::*}
    loop {_lores::*}:
        set {_text} to "%{_text}% %loop-value%"
        if length of {_text} >= {LORE_LENGTH_MAX}:
            add "§f%{_text}%" to {_res::*}
            set {_text} to ""
        else if {_idx} >= size of {_lores::*}:
            set {_maxLength} to amount of {_res::*}
            if length of {_text} + length of {_res::%{_maxLength}%} > {LORE_LENGTH_MAX} + 10:
                add "§f%{_text}%" to {_res::*}
            else:
                if {_maxLength} is not 0:
                    set {_res::%{_maxLength}%} to "%{_res::%{_maxLength}%}%%{_text}%"
                else:
                    set {_res::*} to {_text}
        add 1 to {_idx}
    return {_res::*}

function i18n_item_lore_to_list(lore: text) :: texts:
    delete {_res::*}
    set {_lore::*} to {_lore} split at newline
    loop {_lore::*}:
        add i18n_transform_description(loop-value) to {_res::*}
    return "" and {_res::*}

# internationalize an item
function i18n_item(p: player, it: item) :: item:
    set {_title} to i18n_item_title({_p}, {_it})
    set {_lore} to i18n_item_lore({_p}, {_it})
    set {_loreGifts::*} to i18n_item_gift_lore({_p}, {_it})
    set {_loreAttributes} to i18n_item_attribute_lore({_p}, {_it})
    set {_loreSkill::*} to i18n_item_skill_lore({_p}, {_it})
    set {_loreIntellect::*} to i18n_item_intellect_lore({_p}, {_it})
    set {_loreStats::*} to i18n_item_stat_lore({_p}, {_it})
    set {_loreDescription::*} to i18n_item_lore_to_list({_lore})
    set {_lores::*} to {_loreGifts::*}, {_loreAttributes}, {_loreSkill::*}, {_loreIntellect::*}, {_loreStats::*} and {_loreDescription::*}
    if {_lores::*} is not "":
        set lore of {_it} to {_lores::*}    
    set name of {_it} to {_title}
    return {_it}