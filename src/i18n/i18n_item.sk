#Return item attribute
function i18n_item_attr(p: player, item: item, attr: text) :: text:
    set {_type} to item_nbt_get_tag({_item}, "TYPE")
    set {_category} to item_nbt_get_tag({_item}, "CATEGORY")
    set {_id} to item_nbt_get_tag({_item}, "ID")
    set {_will::*} to item_nbt_get_list({_item}, "WILL")
    if size of {_will::*} > 0:
        set {_id} to first element of {_will::*}
        return i18n({_p}, "SKILL.%{_category}%.%{_id}%.%{_attr}%")
    else:
        return i18n({_p}, "%{_type}%.%{_category}%.%{_id}%.%{_attr}%")

function i18n_item_title(p: player, it: item) :: text:
    set {_title} to i18n_item_attr({_p}, {_it}, "TITLE")
    set {_tier} to item_nbt_get_stat({_it}, "TIER")
    replace "{_TIER}" in {_title} with parser_tier({_tier})
    return {_title}

function i18n_item_gift_lore(p: player, it: item) :: texts:
    delete {_res::*}
    set {_type} to item_nbt_get_tag({_it}, "TYPE")
    set {_category} to item_nbt_get_tag({_it}, "CATEGORY")
    set {_id} to item_nbt_get_tag({_it}, "ID")
    loop {GIFT::*}:
        set {_i18nGift} to i18n({_p}, "GIFT.%loop-value%.TITLE")
        set {_giftMaxValue} to item_nbt_get_stat({_it}, "%loop-value%_MAX")
        set {_giftCountValue} to size of item_nbt_get_list({_it}, loop-value)
        if {_giftMaxValue} is not 0:
            if {_giftMaxValue} is set:
                add " %{_i18nGift}%: %{_giftCountValue}%/%{_giftMaxValue}%" to {_res::*}
    if size of {_res::*} > 0:
        return {_res::*}

function i18n_item_attribute_lore(p: player, it: item) :: text:
    set {_res} to ""
    set {_attributes::*} to item_nbt_get_list({_it}, "ATTRIBUTE")
    if {_attributes::*} is set:
        loop {_attributes::*}:
            set {_i18nAttr} to i18n({_p}, "ATTRIBUTE.%loop-value%", "§e")
            set {_res} to "%{_res}%%{_i18nAttr}%"
        return {_res}

function i18n_item_stat_lore(p: player, it: item) :: texts:
    set {_type} to item_nbt_get_tag({_it}, "TYPE")
    if {_type} is "EQUIPMENT":
        set {_res::*} to ""
        loop {STAT::ALL::*}:
            set {_stat} to loop-value
            if item_nbt_isset_stat({_it}, {_stat}) is true:
                set {_value} to color_number(item_nbt_get_stat({_it}, {_stat}))
                set {_i18nStat} to i18n({_p}, "STAT.%{_stat}%.NORMAL", "§f")
                add "%{_i18nStat}% : %{_value}%" to {_res::*}
        return {_res::*}

function i18n_item_lore(p: player, it: item) :: text:
    set {_type} to item_nbt_get_tag({_it}, "TYPE")
    set {_category} to item_nbt_get_tag({_it}, "CATEGORY")
    set {_id} to item_nbt_get_tag({_it}, "ID")
    set {_lore} to i18n_item_attr({_p}, {_it}, "LORE")
    loop {STAT::ALL::*}:
        set {_multiplier} to 0
        set {_playerStat} to 0
        set {_key} to loop-value
        set {_value} to item_nbt_get_stat({_it}, {_key})
        if item_nbt_isset_stat({_it}, "%{_key}%_MULTIPLIER") is true:
            if player_store_stat_isset({_p}, {_key}) is true:
                set {_multiplier} to item_nbt_get_stat({_it}, "%{_key}%_MULTIPLIER")
                set {_playerStat} to player_store_stat_get({_p}, {_key})
        set {_color} to {STAT::%{_key}%::COLOR}
        set {_icon} to {STAT::%{_key}%::ICON}
        set {_valueFinal} to {_value} + {_playerStat} * {_multiplier}
        replace "{_%{_key}%}" in {_lore} with "%{_color}%%{_icon}%%{_valueFinal}%§f"
    return {_lore}

#transform a lore to list to make sure it will be visible once set to an item
function i18n_item_lore_to_list(lore: text) :: texts:    
    if {_lore} is "":
        return ""
    set {_lores::*} to {_lore} split at " "
    set {_text} to "§f"
    set {_idx} to 1
    delete {_res::*}
    loop {_lores::*}:
        set {_text} to "%{_text}% %loop-value%"
        if length of {_text} >= {LORE_LENGTH_MAX}:
            add "§f%{_text}%" to {_res::*}
            set {_text} to ""
        else if {_idx} >= size of {_lores::*}:
            set {_maxLength} to amount of {_res::*}
            if length of {_text} + length of {_res::%{_maxLength}%} > {LORE_LENGTH_MAX} + 10:
                add "§f%{_text}%" to {_res::*}
            else:
                if {_maxLength} is not 0:
                    set {_res::%{_maxLength}%} to "%{_res::%{_maxLength}%}%%{_text}%"
                else:
                    set {_res::*} to {_text}
        add 1 to {_idx}
    return {_res::*}

# internationalize an item
function i18n_item(p: player, it: item) :: item:
    set {_title} to i18n_item_title({_p}, {_it})
    set {_lore} to i18n_item_lore({_p}, {_it})
    set {_loreGifts::*} to i18n_item_gift_lore({_p}, {_it})
    set {_loreAttributes} to i18n_item_attribute_lore({_p}, {_it})
    set {_loreStats::*} to i18n_item_stat_lore({_p}, {_it})
    set {_finalLore::*} to i18n_item_lore_to_list({_lore})
    set {_lores::*} to {_loreGifts::*}, {_loreAttributes}, {_loreStats::*} and {_finalLore::*}
    if {_lores::*} is not "":
        set lore of {_it} to {_lores::*}    
    set name of {_it} to {_title}
    return {_it}