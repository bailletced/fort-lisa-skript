function test_item_skill(p: player):
  send "ยง5Testing items skill" to the console 
  it "Test skill give":
    player_store_skill_delete_all({_p})
    clear inventory of {_p}
    skill_give({_p}, "TIER_1", "TEST")
    set {_skill} to slot 0 of inventory of {_p}
    set {_type} to item_nbt_get_tag({_skill}, "TYPE")
    set {_category} to item_nbt_get_tag({_skill}, "CATEGORY")
    set {_id} to item_nbt_get_tag({_skill}, "ID")

    assert if {_type} is "SKILL" with message "item type should be SKILL. Got %{_type}%"
    assert if {_category} is "TIER_1" with message "weapon category should be TIER_1. Got %{_category}%"
    assert if {_id} is "TEST" with message "weapon id should be TEST. Got %{_id}%"
  
  it "Test skill should be in cd after being casted":
    clear inventory of {_p}
    player_store_skill_delete_all({_p})
    player_store_stat_set({_p}, "MANA", 100)
    skill_give({_p}, "TIER_1", "TEST")
    set {_skill} to slot 0 of inventory of {_p}
    set {_cdBefore} to item_store_stat_get({_skill}, "CD")
    set {_isCasted} to skill_cast({_p}, {_skill})
    set {_cdAfter} to item_store_stat_get({_skill}, "CD")
    assert if {_cdBeofre} is not set with message "skill CD not be set if not casted. Got %{_cdBefore}%"
    assert if {_isCasted} is true with message "skill should be casted. Got CD %{_isCasted}%"
  
  it "Test skill cast: not enough mana":
    clear inventory of {_p}
    player_store_skill_delete_all({_p})
    skill_give({_p}, "TIER_1", "TEST")
    player_store_stat_set({_p}, "MANA", 100)
    set {_skill} to slot 0 of inventory of {_p}
    player_store_stat_set({_p}, "MANA", 10)
    set {_playerMana} to player_store_stat_get({_p}, "MANA")
    set {_requiredMana} to item_nbt_get_stat({_skill}, "MANA")
    set {_skillCasted} to skill_cast({_p}, {_skill})
    set {_cd} to item_store_stat_get({_skill}, "CD")
    assert if {_playerMana} < {_requiredMana} with message "player mana should be inferior than %{_requiredMana}%. Got %{_playerMana}%."
    assert if {_skillCasted} is false with message "skill should not be casted because not enough mana. Got %{_skillCasted}%"

  it "Test skill cooldown":
    clear inventory of {_p}
    player_store_skill_delete_all({_p})
    player_store_stat_set({_p}, "POWER", 50)
    player_store_stat_set({_p}, "MANA", 100)
    set {_skill} to skill_give({_p}, "TIER_1", "TEST")
    set {_slot} to player_store_skill_slot({_p}, {_skill})
    set {_expectedType} to type of {UTILITY::MAIN::CD::ITEM}
    set {_initialCount} to player_store_skill_count({_p})
    skill_cast({_p}, {_skill})
    set {_type} to type of slot {_slot} of {_p}
    set {_finalCount} to player_store_skill_count({_p})
    set {_expectedName} to name of {_skill}
    set {_name} to name of slot {_slot} of {_p}
    assert if {_type} is {_expectedType} with message "type of slot %{_slot}% of player should be %{_expectedType}%. Got %{_type}%"
    assert if {_initialCount} is {_finalCount} with message "skill count should be %{_initialCount}%. Got %{_finalCount}%"
    assert if {_name} is {_expectedName} with message "name of cd item should be %{_expectedName}% Got %{_name}%"

    set {_initialItemCd} to slot {_slot} of {_p}
    player_store_stat_set({_p}, "POWER", 100)
    set {_itemCd} to slot {_slot} of {_p}
    set {_initialLore} to line 3 of lore of {_initialItemCd}
    set {_lore} to line 3 of lore of {_itemCd}
    set {_finalCount} to player_store_skill_count({_p})
    assert if {_initialLore} is not {_lore} with message "Lore should not be the same. Before: %{_initialLore}%. After: %{_lore}%"
    assert if {_initialCount} is {_finalCount} with message "skill count should be %{_initialCount}%. Got %{_finalCount}%"

  it "Test skill not enough mana":
    clear inventory of {_p}
    player_store_skill_delete_all({_p})
    player_store_stat_set({_p}, "MANA", 70)
    set {_skill1} to skill_give({_p}, "TIER_1", "TEST")
    set {_slotSkill1} to player_store_skill_slot({_p}, {_skill1})

    set {_skill2} to skill_give({_p}, "TIER_1", "DRAGON_BREATH")
    set {_slotSkill2} to player_store_skill_slot({_p}, {_skill2})
    set {_manaItem} to skill_mana_item({_p}, {_skill2})
    
    assert if slot {_slotSkill1} of {_p} is {_skill1} with message "skill 1 should be %{_skill1}%. Got %slot {_slotSkill1} of {_p}%"
    assert if slot {_slotSkill2} of {_p} is {_manaItem} with message "skill 2 should be %{_manaItem2}%. Got %slot {_slotSkill2} of {_p}%"