function test_mob_store_listener(p: player):
  send "ยง5Testing mob_store_listener" to the console
  set {_location} to location of {_p}
  it "test all store":
    summon zombie at {_location}
    set {_mob} to last spawned entity
    mob_store_listener_set({_mob}, "TARGET_PLAYER_RADIUS_SOFT")
    set {_count} to mob_store_listener_count({_mob})
    assert if {_count} is 1 with message "mob store listener should contain 1 element. Got %{_count}%"
    
    mob_store_listener_set({_mob}, ("TARGET_PLAYER_RADIUS_SOFT" and "LISTENER2"))
    set {_count} to mob_store_listener_count({_mob})
    set {_listeners::*} to mob_store_listener_get_all({_mob})
    set {_enabledListeners::*} to mob_store_listener_get_all_enabled({_mob})
    set {_disabledListeners::*} to mob_store_listener_get_all_disabled({_mob})

    assert if {_count} is 2 with message "mob store listener should contain 2 element. Got %{_count}%"
    assert if size of {_listeners::*} is 2 with message "mob store listener get all should be 'TARGET_PLAYER_RADIUS_SOFT' and 'LISTENER2'. Got %{_listeners::*}%"
    assert if size of {_enabledListeners::*} is 0 with message "enabled listeners count should be 0. Got %size of {_enabledListeners::*}%"
    assert if size of {_disabledListeners::*} is 2 with message "disabled listeners count should be 2. Got %size of {_disabledListeners::*}%"

    mob_store_listener_delete({_mob}, "LISTENER2")
    set {_isset} to mob_store_listener_isset({_mob}, "LISTENER2")
    set {_isset2} to mob_store_listener_isset({_mob}, "LISTENER3")
    assert if {_isset} is false with message "isset should be false. Got %{_isset}%"
    assert if {_isset2} is false with message "isset should be false. Got %{_isset2}%"

    mob_store_listener_delete_all({_mob})
    set {_isset} to mob_store_listener_isset({_mob}, "TARGET_PLAYER_RADIUS_SOFT")
    set {_isEnabled} to mob_store_listener_isEnabled({_mob}, "TARGET_PLAYER_RADIUS")
    assert if {_isset} is false with message "isset should be false. Got %{_isset}%"
    assert if {_isEnabled} is false with message "TARGET_PLAYER_RADIUS isEnabled should be false. Got %{_isEnabled}%"

    kill {_mob}

  it "test with two different mobs":
    summon zombie at {_location}
    set {_mob1} to last spawned entity
    summon zombie at {_location}
    set {_mob2} to last spawned entity

    mob_store_listener_set({_mob1}, ("TARGET_PLAYER_RADIUS_SOFT"))
    mob_store_listener_set({_mob2}, ("TARGET_PLAYER_RADIUS_SOFT" and "LISTENER2"))
    set {_disabledListeners1::*} to mob_store_listener_get_all_disabled({_mob1})
    set {_disabledListeners2::*} to mob_store_listener_get_all_disabled({_mob2})

    assert if {_disabledListeners1::*} is "TARGET_PLAYER_RADIUS_SOFT" with message "disabled listeners for mob1 should be TARGET_PLAYER_RADIUS_SOFT. Got %{_disabledListeners1::*}%"
    assert if {_disabledListeners2::*} contains "TARGET_PLAYER_RADIUS_SOFT" with message "disabled listeners for mob2 should contain TARGET_PLAYER_RADIUS_SOFT. Got %{_disabledListeners2::*}%"
    assert if {_disabledListeners2::*} contains "LISTENER2" with message "disabled listeners for mob2 should contain LISTENER2. Got %{_disabledListeners2::*}%"

    kill {_mob1}
    kill {_mob2}

  it "test initialize listener with some keys/val":
    summon zombie at {_location}
    set {_mob1} to last spawned entity
    summon zombie at {_location}
    set {_mob2} to last spawned entity

    mob_store_listener_set({_mob1}, ("TARGET_PLAYER_RADIUS_SOFT"), ("radius" and "timer"), (10 and 55))
    mob_store_listener_set({_mob2}, ("TARGET_PLAYER_RADIUS_SOFT"), ("radius" and "timer"), (20 and 65))

    set {_radiusMob1} to mob_store_listener_get_value({_mob1}, "TARGET_PLAYER_RADIUS_SOFT", "radius")
    set {_timerMob1} to mob_store_listener_get_value({_mob1}, "TARGET_PLAYER_RADIUS_SOFT", "timer")
    set {_radiusMob2} to mob_store_listener_get_value({_mob2}, "TARGET_PLAYER_RADIUS_SOFT", "radius")
    set {_timerMob2} to mob_store_listener_get_value({_mob2}, "TARGET_PLAYER_RADIUS_SOFT", "timer")

    mob_store_listener_set_value({_mob1}, "FAKE_LISTENER", "radius", 100)
    set {_fakeRadiusMob1} to mob_store_listener_get_value({_mob1}, "FAKE_LISTENER", "radius")

    assert if {_radiusMob1} is 10 with message "radius for mob1 should be 10. Got %{_radiusMob1}%"
    assert if {_timerMob1} is 55 with message "timer for mob1 should be 55. Got %{_radiusMob1}%"
    assert if {_radiusMob2} is 20 with message "radius for mob2 should be 20. Got %{_radiusMob2}%"
    assert if {_timerMob2} is 65 with message "timer for mob2 should be 65. Got %{_timerMob2}%"
    assert if {_fakeRadiusMob1} is not set with message "a key to a non-set listener should not be set. Got %{_fakeRadiusMob1}%"

    kill {_mob1}
    kill {_mob2}
